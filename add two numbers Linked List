/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* tem1=l1;
        ListNode* tem2=l2;
        ListNode* head=new ListNode(0);
        ListNode* tem3=head;
        
           /* int sum=tem1->val+tem2->val;
            int actual=sum%10;
            int carry=sum/10; 
            head->val=actual;
          
        tem1=tem1->next;
        tem2=tem2->next;*/
        int carry=0;
        int actual=0;
        while(tem1!=NULL || tem2!=NULL)
        {
            int sum;
            ListNode* node=new ListNode(0);
            if(tem1==NULL)
            {
                sum=tem2->val+carry;
               //  tem1=tem1->next;
                tem2=tem2->next;
            }
            else if(tem2==NULL)
            {
                sum=tem1->val+carry;
                 tem1=tem1->next;
                //tem2=tem2->next;
            }
            else
            {
                sum=tem1->val+tem2->val+carry;
                 tem1=tem1->next;
                 tem2=tem2->next;
            }
          //  cout<<sum<<" ";
            actual=sum%10;
           // cout<<actual<<" ";
            carry=sum/10;
           // cout<<carry<<" ";
            node->val=actual;
            tem3->next=node;
           
            tem3=tem3->next;
        }
       if(carry!=0)
       { cout<<carry<<"&";
            ListNode* node1=new ListNode(0);
            node1->val=carry;
           tem3->next=node1;
           tem3=tem3->next;
       }
    ListNode* tem4=head;
        head=tem4->next;
        return head;
        
    }
};
